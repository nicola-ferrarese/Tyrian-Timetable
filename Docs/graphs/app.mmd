
classDiagram


    class CommandHandler {
        <<interface>>
        +handle(Command) IO~Event~
    }

    class BusCommandHandler {
        +handle(BusCommand) IO~BusEvent~
    }

    class AirplaneCommandHandler {
        +handle(AirplaneCommand) IO~AirplaneEvent~
    }

    class TransportAPI {
        <<interface>>
        +loadStations() IO~List~StationDTO~~
        +loadDepartures(String stationId) IO~List~DepartureDTO~~
    }

    class BusAPI {
        -String apiKey
        +loadStations() IO~List~StationDTO~~
        +loadDepartures(String stationId) IO~List~DepartureDTO~~
    }

    class AirplaneAPI {
        -String apiKey
        +loadStations() IO~List~StationDTO~~
        +loadDepartures(String airportId) IO~List~DepartureDTO~~
        +loadArrivals(String airportId) IO~List~ArrivalDTO~~
        +loadRoutes(String originId, String destinationId) IO~List~RouteDTO~~
    }

    class TransportFacade {
        -BusAPI busAPI
        -AirplaneAPI airplaneAPI
        +loadBusStations() IO~List~Station~~
        +loadAirports() IO~List~Station~~
        +loadBusDepartures(String stationId) IO~List~Departure~~
        +loadAirportDepartures(String airportId) IO~List~Departure~~
        +loadAirportArrivals(String airportId) IO~List~Arrival~~
        +checkRoute(String originId, String destinationId) IO~Route~
    }

    class TransportApp {
        +init() Tuple~Model,Cmd~IO,Msg~~
        +update(Msg msg, Model model) Tuple~Model,Cmd~IO,Msg~~
        +view(Model model) Html~Msg~
    }


    CommandHandler <|.. BusCommandHandler
    CommandHandler <|.. AirplaneCommandHandler

    TransportAPI <|.. BusAPI
    TransportAPI <|.. AirplaneAPI

    TransportFacade --> BusAPI
    TransportFacade --> AirplaneAPI

    BusCommandHandler --> BusAPI
    AirplaneCommandHandler --> AirplaneAPI

    TransportApp --> TransportFacade
    TransportApp --> CommandHandler

