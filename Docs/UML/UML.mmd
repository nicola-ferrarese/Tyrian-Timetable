classDiagram
    class SL_Station {
        +String id
        +String name
        +String transportType
    }
    class SL_Departure {
        +String id
        +String transportType
        +String destination
        +String scheduledTime
        +String status
    }
    class Station {
        +String id
        +String name
    }
    class Departure {
        +String line
        +String destination
        +TransportType transportType
        +LocalDateTime scheduledTime
        +LocalDateTime expectedTime
        +String waitingTime
    }
    class TransportType {
        <<enumeration>>
        All
        Bus
        Train
        Ferry
        Tram
        Metro
        Taxi
        Ship
    }
    class Model {
        +Either[String, List[Station]] slStations
        +Option[List[Departure]] slDepartures
        +Station selectedStation
        +TransportType slTransportTypeFilter
    }
    class SLApi {
        +loadStations() IO[Either[String, List[Station]]]
        +loadDepartures(String, TransportType) IO[Option[List[Departure]]]
    }
    class TransportFacade {
        -SLApi slApi
        +loadSLStations() IO[Either[String, List[Station]]]
        +getSLDepartures(String, TransportType) IO[Option[List[Departure]]]
    }
    class SLCommand {
        <<enumeration>>
        LoadStations
        GetDepartures(String, TransportType)
    }
    class SLEvent {
        <<enumeration>>
        StationsLoaded(Either[String, List[Station]])
        DeparturesLoaded(List[Departure])
    }
    class TyEvent {
        <<enumeration>>
        stationSelected(Station)
        TransportFilterUpdated(TransportType)
        UpdateDepartures
    }
    class SLHandler {
        -TransportFacade transportFacade
        +handle(SLCommand) IO[SLEvent]
    }
    class TransportApp {
        +init(Map[String, String]) (Model, Cmd[IO, Msg])
        +update(Model) Msg => (Model, Cmd[IO, Msg])
        +view(Model) Html[Msg]
    }

    SL_Station ..> Station : Converted to
    SL_Departure ..> Departure : Converted to
    Station --> TransportType
    Departure --> TransportType
    Model --> Station
    Model --> Departure
    Model --> TransportType
    SLApi ..> SL_Station : Receives
    SLApi ..> SL_Departure : Receives
    TransportFacade --> SLApi : Uses
    SLHandler --> TransportFacade : Uses
    TransportApp --> Model : Updates
    TransportApp --> SLHandler : Uses
    TransportApp --> TransportFacade : Uses
    SLCommand --> TransportType
    SLEvent --> Station
    SLEvent --> Departure
    TyEvent --> Station
    TyEvent --> TransportType
    TransportApp ..> SLCommand : Generates
    TransportApp ..> SLEvent : Handles
    TransportApp ..> TyEvent : Handles
    SLHandler ..> SLCommand : Receives
    SLHandler ..> SLEvent : Produces