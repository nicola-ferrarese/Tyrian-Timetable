"use strict";(self.webpackChunktyrian_transport_docs=self.webpackChunktyrian_transport_docs||[]).push([[146],{9262:(e,i,n)=>{n.r(i),n.d(i,{assets:()=>o,contentTitle:()=>s,default:()=>p,frontMatter:()=>r,metadata:()=>l,toc:()=>c});var a=n(4848),t=n(8453);const r={sidebar_position:3,sidebar_label:"Architectural Design"},s="Design Architetturale",l={id:"tutorial-basics/architectural_design",title:"Design Architetturale",description:"Architettura Complessiva",source:"@site/docs/tutorial-basics/architectural_design.md",sourceDirName:"tutorial-basics",slug:"/tutorial-basics/architectural_design",permalink:"/Tyrian-Timetable/docs/docs/tutorial-basics/architectural_design",draft:!1,unlisted:!1,tags:[],version:"current",sidebarPosition:3,frontMatter:{sidebar_position:3,sidebar_label:"Architectural Design"},sidebar:"docSidebar",previous:{title:"Requirements",permalink:"/Tyrian-Timetable/docs/docs/tutorial-basics/requirements"},next:{title:"Detailed Design",permalink:"/Tyrian-Timetable/docs/docs/tutorial-basics/detailed_design"}},o={},c=[{value:"Architettura Complessiva",id:"architettura-complessiva",level:2},{value:"Layer dell&#39;Applicazione",id:"layer-dellapplicazione",level:3},{value:"Diagramma Architetturale di Alto Livello",id:"diagramma-architetturale-di-alto-livello",level:2},{value:"Pattern Architetturali Utilizzati",id:"pattern-architetturali-utilizzati",level:2},{value:"Componenti Principali del Sistema",id:"componenti-principali-del-sistema",level:2},{value:"Interazioni tra Componenti",id:"interazioni-tra-componenti",level:2},{value:"Gestione degli Eventi e dei Comandi",id:"gestione-degli-eventi-e-dei-comandi",level:2}];function d(e){const i={em:"em",h1:"h1",h2:"h2",h3:"h3",header:"header",li:"li",mermaid:"mermaid",p:"p",strong:"strong",ul:"ul",...(0,t.R)(),...e.components};return(0,a.jsxs)(a.Fragment,{children:[(0,a.jsx)(i.header,{children:(0,a.jsx)(i.h1,{id:"design-architetturale",children:"Design Architetturale"})}),"\n",(0,a.jsx)(i.h2,{id:"architettura-complessiva",children:"Architettura Complessiva"}),"\n",(0,a.jsx)(i.p,{children:"L'applicazione Stockholm Transit Tracker segue un'architettura a layer. Questa struttura permette una chiara separazione delle responsabilit\xe0, facilitando la manutenibilit\xe0, la testabilit\xe0 e l'estensibilit\xe0 del sistema."}),"\n",(0,a.jsx)(i.h3,{id:"layer-dellapplicazione",children:"Layer dell'Applicazione"}),"\n",(0,a.jsxs)(i.ul,{children:["\n",(0,a.jsxs)(i.li,{children:["\n",(0,a.jsxs)(i.p,{children:[(0,a.jsx)(i.em,{children:"Presentation Layer"}),": Gestisce l'interfaccia utente e le interazioni."]}),"\n",(0,a.jsxs)(i.ul,{children:["\n",(0,a.jsx)(i.li,{children:"Componenti principali: TransportApp, view function"}),"\n",(0,a.jsx)(i.li,{children:"Tecnologie: Tyrian, Scala.js"}),"\n"]}),"\n"]}),"\n",(0,a.jsxs)(i.li,{children:["\n",(0,a.jsxs)(i.p,{children:[(0,a.jsx)(i.em,{children:"Application Layer"}),": Gestisce la logica di business e i casi d'uso."]}),"\n",(0,a.jsxs)(i.ul,{children:["\n",(0,a.jsx)(i.li,{children:"Componenti principali: SLHandler, Model"}),"\n",(0,a.jsx)(i.li,{children:"Responsabilit\xe0: Processare i comandi, gestire gli eventi, aggiornare lo stato dell'applicazione"}),"\n"]}),"\n"]}),"\n",(0,a.jsxs)(i.li,{children:["\n",(0,a.jsxs)(i.p,{children:[(0,a.jsx)(i.em,{children:"Domain Layer"}),": Contiene la logica di business core e le entit\xe0 del dominio."]}),"\n",(0,a.jsxs)(i.ul,{children:["\n",(0,a.jsx)(i.li,{children:"Componenti principali: Station, Departure, TransportType"}),"\n",(0,a.jsx)(i.li,{children:"Responsabilit\xe0: Definire le strutture dati e le regole di business fondamentali"}),"\n"]}),"\n"]}),"\n",(0,a.jsxs)(i.li,{children:["\n",(0,a.jsxs)(i.p,{children:[(0,a.jsx)(i.em,{children:"Infrastructure Layer"}),": Si occupa dei servizi esterni e delle fonti di dati."]}),"\n",(0,a.jsxs)(i.ul,{children:["\n",(0,a.jsx)(i.li,{children:"Componenti principali: SLApi, TransportFacade"}),"\n",(0,a.jsx)(i.li,{children:"Responsabilit\xe0: Comunicazione con API esterne, gestione dei dati persistenti"}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,a.jsx)(i.h2,{id:"diagramma-architetturale-di-alto-livello",children:"Diagramma Architetturale di Alto Livello"}),"\n",(0,a.jsx)(i.mermaid,{value:"graph TD\n    A[TransportApp] --\x3e B[Model]\n    A --\x3e C[SLHandler]\n    A --\x3e D[TransportFacade]\n    C --\x3e D\n    D --\x3e E[SLApi]\n    E --\x3e F[External SL API]\n    B --\x3e G[Station]\n    B --\x3e H[Departure]\n    B --\x3e I[TransportType]"}),"\n",(0,a.jsx)(i.p,{children:"Questo diagramma mostra le principali componenti dell'applicazione e le loro relazioni."}),"\n",(0,a.jsx)(i.h2,{id:"pattern-architetturali-utilizzati",children:"Pattern Architetturali Utilizzati"}),"\n",(0,a.jsxs)(i.ul,{children:["\n",(0,a.jsxs)(i.li,{children:["\n",(0,a.jsxs)(i.p,{children:[(0,a.jsx)(i.strong,{children:(0,a.jsx)(i.em,{children:"Model-View-Update (MVU)"})}),"\nImplementato attraverso Tyrian, questo pattern separa la logica di stato (Model), la presentazione (View) e l'aggiornamento dello stato (Update)."]}),"\n"]}),"\n",(0,a.jsxs)(i.li,{children:["\n",(0,a.jsxs)(i.p,{children:[(0,a.jsx)(i.strong,{children:(0,a.jsx)(i.em,{children:"Command-Query Responsibility Segregation (CQRS)"})}),"\nSeparazione tra comandi (SLCommand) che modificano lo stato e query che leggono lo stato, implementato attraverso la struttura degli eventi e dei comandi."]}),"\n"]}),"\n",(0,a.jsxs)(i.li,{children:["\n",(0,a.jsxs)(i.p,{children:[(0,a.jsx)(i.strong,{children:(0,a.jsx)(i.em,{children:"Event Sourcing"})}),"\nUtilizzo di eventi (SLEvent e TyEvent) per rappresentare cambiamenti nello stato dell'applicazione."]}),"\n"]}),"\n",(0,a.jsxs)(i.li,{children:["\n",(0,a.jsxs)(i.p,{children:[(0,a.jsx)(i.strong,{children:(0,a.jsx)(i.em,{children:"Repository Pattern"})}),"\nImplementato attraverso SLApi, che astrae l'accesso ai dati esterni."]}),"\n"]}),"\n",(0,a.jsxs)(i.li,{children:["\n",(0,a.jsxs)(i.p,{children:[(0,a.jsx)(i.strong,{children:(0,a.jsx)(i.em,{children:"Facade Pattern"})}),"\nTransportFacade agisce come una facciata, semplificando l'interfaccia per l'accesso ai servizi di trasporto."]}),"\n"]}),"\n"]}),"\n",(0,a.jsx)(i.h2,{id:"componenti-principali-del-sistema",children:"Componenti Principali del Sistema"}),"\n",(0,a.jsxs)(i.ul,{children:["\n",(0,a.jsxs)(i.li,{children:[(0,a.jsx)(i.strong,{children:"TransportApp"}),": Componente principale che gestisce il ciclo di vita dell'applicazione."]}),"\n",(0,a.jsxs)(i.li,{children:[(0,a.jsx)(i.strong,{children:"Model"}),": Rappresenta lo stato dell'applicazione."]}),"\n",(0,a.jsxs)(i.li,{children:[(0,a.jsx)(i.strong,{children:"SLHandler"}),": Gestisce i comandi SL e produce eventi corrispondenti."]}),"\n",(0,a.jsxs)(i.li,{children:[(0,a.jsx)(i.strong,{children:"TransportFacade"}),": Astrae l'accesso ai servizi di trasporto."]}),"\n",(0,a.jsxs)(i.li,{children:[(0,a.jsx)(i.strong,{children:"SLApi"}),": Interfaccia per l'accesso ai dati esterni del servizio SL."]}),"\n"]}),"\n",(0,a.jsx)(i.h2,{id:"interazioni-tra-componenti",children:"Interazioni tra Componenti"}),"\n",(0,a.jsx)(i.mermaid,{value:"sequenceDiagram\n    participant TransportApp\n    participant Model\n    participant SLHandler\n    participant TransportFacade\n    participant SLApi\n\n    TransportApp->>SLHandler: Esegue SLCommand\n    SLHandler->>TransportFacade: Richiede dati\n    TransportFacade->>SLApi: Chiama API esterna\n    SLApi--\x3e>TransportFacade: Restituisce dati\n    TransportFacade--\x3e>SLHandler: Restituisce risultato\n    SLHandler--\x3e>TransportApp: Produce SLEvent\n    TransportApp->>Model: Aggiorna stato\n    TransportApp->>TransportApp: Aggiorna vista"}),"\n",(0,a.jsx)(i.h2,{id:"gestione-degli-eventi-e-dei-comandi",children:"Gestione degli Eventi e dei Comandi"}),"\n",(0,a.jsx)(i.mermaid,{value:"classDiagram\n    class Command {\n        <<interface>>\n    }\n    class SLCommand {\n        <<enumeration>>\n        LoadStations\n        GetDepartures(String stationId, TransportType filter)\n    }\n    class AppEvent {\n        <<interface>>\n    }\n    class SLEvent {\n        <<enumeration>>\n        StationsLoaded(Either[String, List[Station]] stations)\n        DeparturesLoaded(List[Departure] departures)\n    }\n    class TyEvent {\n        <<enumeration>>\n        stationSelected(Station station)\n        TransportFilterUpdated(TransportType filter)\n        UpdateDepartures\n    }\n\n    Command <|-- SLCommand\n    AppEvent <|-- SLEvent\n    AppEvent <|-- TyEvent"})]})}function p(e={}){const{wrapper:i}={...(0,t.R)(),...e.components};return i?(0,a.jsx)(i,{...e,children:(0,a.jsx)(d,{...e})}):d(e)}}}]);